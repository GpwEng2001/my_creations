#Learning pi commands in Python

import RPi.GPIO as GPIO  
import time

#GPIO.setmode(GPIO.X)
# BCM - The physical pin numbers as they are labeled on the Broadcom SOC(System on Chip) used in Raspberry Pi models. (GPIO24)
# BOARD - The physical pin numbers as they are labeled on the GPIO header of the Raspberry Pi. (Pin 18)
#Examples: The same pin in BCM is GPIO 24 whereas in BOARD it is 18

GPIO.setmode(GPIO.BCM)

#GPIO.setup(Pin number, direction)
# Pin Number - physical pin number or BCM channel number of the GPIO pin you want to configure
# Direction - GPIO.IN for input and GPIO.OUT for output.

green = 18
red = 17

GPIO.setup(green, GPIO.OUT) 
GPIO.setup(red, GPIO.OUT)

#Define as Pulse Width Modulation (PWM)
g_pwm = GPIO.PWM(green, 2000)  #2 
r_pwm = GPIO.PWM(red, 2000)

#Initilize the lights to start off (duty cycle = 0)
g_pwm.start(0)
r_pwm.start(0)


''' 
Hexidecimal Colors (00 - FF or 0 - 255)
The first two digits representing the red component 
The next two digits representing the green component
The last two digits representing the blue component (Not possible for dual LED light)
Ex: 0xFF00 = Red, 0x00FF = Green
'''
colors = (0xFF00,0x00FF,0x649b) #Red, Green and 100 parts red mixed with 155 parts green

'''
Initial State:
 - GPIO.LOW: Sets the initial state of the output to low (0 volts).
 - GPIO.HIGH: Sets the initial state of the output to high (3.3 volts).

Pull-up or Pull-down Resistors:
 - GPIO.PUD_OFF: Disables the internal pull-up and pull-down resistors (default).
 - GPIO.PUD_UP: Enables the internal pull-up resistor, which pulls the pin to a high logic level when it's not being driven low.
 - GPIO.PUD_DOWN: Enables the internal pull-down resistor, which pulls the pin to a low logic level when it's not being driven high.
'''

def light_it_up(t1, t2):

    #Turn on green light for t1 seconds
    GPIO.output(green, GPIO.HIGH)
    time.sleep(t1)
    GPIO.output(green, GPIO.LOW)

    #Turn on red light for t2 seconds
    GPIO.output(red, GPIO.HIGH)
    time.sleep(t2)
    GPIO.output(red, GPIO.LOW)

    return


if __name__ == "__main__":
    try:
        light_it_up(2,3) 

    finally:
        GPIO.cleanup()
